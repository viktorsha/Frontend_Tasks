{"version":3,"sources":["pages/myNotes/myNotes.jsx","App.js","reportWebVitals.js","index.js"],"names":["myNotes","id","title","description","date","this","App","rows","Date","toDateString","useState","selectedNote","setSelectedNote","React","useEffect","localStorage","setItem","JSON","stringify","Grid","container","spacing","item","xs","columns","field","headerName","width","pageSize","autoHeight","isCellEditable","params","onRowClick","selectedItem","row","Card","variant","style","display","justifyContent","CardContent","Typography","color","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+OAWeA,EARX,WAAYC,EAAIC,EAAOC,EAAaC,GAAO,oBACvCC,KAAKJ,GAAKA,EACVI,KAAKH,MAAQA,EACbG,KAAKF,YAAcA,EACnBE,KAAKD,KAAOA,G,4CCuFLE,MAvFf,WACI,IAoCMC,EAAO,CACT,IAAIP,EAAQ,EAAG,cAAe,8OAEmC,IAAIQ,MAAOC,gBAC5E,IAAIT,EAAQ,EAAG,iBAAkB,+JACsE,IAAIQ,MAAOC,gBAClH,IAAIT,EAAQ,EAAG,oBAAqB,wOAEhC,IAAIQ,MAAOC,iBAGnB,EAAwCC,mBAAS,IAAIV,EAAQ,EAAG,GAAI,yBAA0B,KAA9F,mBAAOW,EAAP,KAAqBC,EAArB,KAKA,OAJAC,IAAMC,WAAU,WACZC,aAAaC,QAAQ,QAASC,KAAKC,UAAUX,MAC9C,CAACA,IAGA,eAACY,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,GAAzB,UACI,cAACF,EAAA,EAAD,CAAMC,WAAS,EAACE,MAAI,EAACC,GAAI,EAAGF,QAAS,EAArC,SACI,cAAC,IAAD,CAAUd,KAAMA,EAAMiB,QAzClB,CACZ,CACIC,MAAO,KACPC,WAAY,KACZC,MAAO,KAEX,CACIF,MAAO,QACPC,WAAY,QACZC,MAAO,KAEX,CACIF,MAAO,cACPC,WAAY,cACZC,MAAO,KAEX,CACIF,MAAO,OACPC,WAAY,gBACZC,MAAO,MAsBqCC,SAAU,EAAGC,YAAY,EAAMC,eAAgB,SAACC,GAAD,OAAY,GACzFC,WAAY,SAACC,GAAD,OACRrB,EAAgB,IAAIZ,EAAQiC,EAAaC,IAAIjC,GAAIgC,EAAaC,IAAIhC,MAAO+B,EAAaC,IAAI/B,YAAa8B,EAAaC,IAAI9B,YAG1I,cAACe,EAAA,EAAD,CAAMC,WAAS,EAACE,MAAI,EAACC,GAAI,EAAGF,QAAS,EAArC,SACI,cAACc,EAAA,EAAD,CAAMC,QAAQ,WAAWC,MAxDvB,CACNC,QAAS,OACTC,eAAgB,UAsDZ,SACI,eAACC,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,CAAYC,MAAM,cAAcN,QAAS,KAAzC,SACKzB,EAAaT,QAElB,cAACuC,EAAA,EAAD,UACK9B,EAAaR,cAElB,cAACsC,EAAA,EAAD,UACI,4BAAI9B,EAAaP,oBClE9BuC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCAdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.db90e5b1.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nclass myNotes {\r\n    constructor(id, title, description, date) {\r\n        this.id = id;\r\n        this.title = title;\r\n        this.description = description;\r\n        this.date = date;\r\n    }\r\n}\r\n\r\nexport default myNotes","import './App.css';\nimport React, {useState} from \"react\";\nimport {DataGrid} from \"@material-ui/data-grid\";\nimport myNotes from \"./pages/myNotes/myNotes\";\nimport PropTypes from \"prop-types\";\nimport {Card, CardContent, Grid, Typography} from \"@material-ui/core\";\n\nfunction App() {\n    const styles = {\n        tableGrid: {\n            display: \"flex\",\n            justifyContent: \"center\"\n        },\n        cardName: {\n            display: \"flex\",\n            justifyContent: \"center\"\n        },\n        container: {\n            display: \"flex\",\n            justifyContent: \"space-between\"\n        }\n    }\n    const columns = [\n        {\n            field: \"id\",\n            headerName: \"ID\",\n            width: 100\n        },\n        {\n            field: \"title\",\n            headerName: \"Title\",\n            width: 140\n        },\n        {\n            field: \"description\",\n            headerName: \"Description\",\n            width: 164\n        },\n        {\n            field: \"date\",\n            headerName: \"Creation date\",\n            width: 120\n        },\n    ]\n    const rows = [\n        new myNotes(1, \"JS learning\", \"JavaScript (often shortened to JS) is a lightweight, interpreted, \" +\n            \"object-oriented language with first-class functions, and is best known as the scripting language for Web pages,\" +\n            \" but it's used in many non-browser environments as well. \", new Date().toDateString()),\n        new myNotes(2, \"React learning\", \"React is a library for building composable user interfaces. \" +\n            \"It encourages the creation of reusable UI components, which present data that changes over time\", new Date().toDateString()),\n        new myNotes(3, \"HTML+CSS learning\", \"HTML (the Hypertext Markup Language) and CSS (Cascading Style Sheets) are two of \" +\n            \"the core technologies for building Web pages. HTML provides the structure of the page, CSS the (visual and aural) layout, for a variety of devices.\",\n            new Date().toDateString())\n    ]\n\n    const [selectedNote, setSelectedNote] = useState(new myNotes(1, \"\", \"Select note to display\", \"\"));\n    React.useEffect(() => {\n        localStorage.setItem(\"Notes\", JSON.stringify(rows));\n    }, [rows])\n\n    return (\n        <Grid container spacing={10}>\n            <Grid container item xs={6} spacing={3}>\n                <DataGrid rows={rows} columns={columns} pageSize={3} autoHeight={true} isCellEditable={(params) => true}\n                          onRowClick={(selectedItem) =>\n                              setSelectedNote(new myNotes(selectedItem.row.id, selectedItem.row.title, selectedItem.row.description, selectedItem.row.date))}>\n                </DataGrid>\n            </Grid>\n            <Grid container item xs={6} spacing={3}>\n                <Card variant=\"outlined\" style={styles.cardName}>\n                    <CardContent>\n                        <Typography color=\"textPrimary\" variant={\"h4\"}>\n                            {selectedNote.title}\n                        </Typography>\n                        <Typography>\n                            {selectedNote.description}\n                        </Typography>\n                        <Typography>\n                            <b>{selectedNote.date}</b>\n                        </Typography>\n                    </CardContent>\n                </Card>\n            </Grid>\n        </Grid>\n    );\n}\n\nApp.propTypes = {\n    row: PropTypes.array,\n    columns: PropTypes.array,\n    styles: PropTypes.object\n\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}